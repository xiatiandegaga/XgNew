apiVersion: v1
kind: Namespace
metadata:
  name: <env>-front-<project>
---
apiVersion: apps/v1	#与k8s集群版本有关，使用 kubectl api-versions 即可查看当前集群支持的版本哈
kind: Deployment	#该配置的类型，我们使用的是 Deployment
metadata:	        #译名为元数据，即 Deployment 的一些基本属性和信息
  name: <env>-front-<project>-deployment	#Deployment 的名称
  namespace: <env>-front-<project>
  labels:	    #标签，可以灵活定位一个或多个资源，其中key和value均可自定义，可以定义多组，目前不需要理解
    app: <env>-front-<project>	#为该Deployment设置key为app，value为nginx的标签
spec:	        #这是关于该Deployment的描述，可以理解为你期待该Deployment在k8s中如何使用
  replicas: 1	#使用该Deployment创建一个应用程序实例
  revisionHistoryLimit: 0
  selector:	    #标签选择器，与上面的标签共同作用，目前不需要理解
    matchLabels: #选择包含标签app:<env>-front-<project>的资源
      app: <env>-front-<project>
  template:	    #这是选择或创建的Pod的模板
    metadata:	#Pod的元数据
      labels:	#Pod的标签，上面的selector即选择包含标签app:nginx的Pod
        app: <env>-front-<project>
    spec:	    #期望Pod实现的功能（在pod中部署）
      tolerations:
       - key: node-role.kubernetes.io/master
         operator: Exists
         effect: NoSchedule
      containers:	#生成container，与docker中的container是同一种
      - name: <env>-front-<project>	#container的名称
        image: xxxx-xxxx:xx	
        imagePullPolicy: IfNotPresent
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: <env>-front-<project>-ingress
  namespace: <env>-front-<project>
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/rewrite-target: "/$2"
    nginx.ingress.kubernetes.io/fastcgi-index: "<env>-front-<project>/index.html"
    nginx.ingress.kubernetes.io/configuration-snippets: |
      rewrite ^/<env>-front-<project>/(.*)$ /$1/ redirect;
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/X-Forwarded-For:  "<env>-front-<project>"
spec:
  rules:
  - host: <HOST_NAME>
    http:
      paths:
       - pathType: Prefix
         path: /<env>-front-<project>(/|$)(.*)
         backend:
           service:
             name: <env>-front-<project>-service
             port:
               number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: <env>-front-<project>-service	#Service 的名称
  namespace: <env>-front-<project>
  labels:     	#Service 自己的标签
    app: <env>-front-<project>	#为该 Service 设置 key 为 app，value 为 <env>front-<project> 的标签
spec:	    #这是关于该 Service 的定义，描述了 Service 如何选择 Pod，如何被访问
  selector:	    #标签选择器
    app: <env>-front-<project>	#选择包含标签 app:<env>front-<project> 的 Pod
  ports:
  - name: <env>-front-<project>-port	#端口的名字
    protocol: TCP	    #协议类型 TCP/UDP
    port: 80	        #集群内的其他容器组可通过 80 端口访问 Service
    #nodePort: 32700   #通过任意节点的 32600 端口访问 Service
    targetPort: 80	#将请求转发到匹配 Pod 的 80 端口
  type: ClusterIP	#Serive的类型，ClusterIP/NodePort/LoaderBalancer 